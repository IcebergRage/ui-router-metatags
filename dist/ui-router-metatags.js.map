{"version":3,"sources":["ui-router-metatags.ts","ui-router-metatags.js"],"names":[],"mappings":"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","file":"ui-router-metatags.js","sourcesContent":["/**\n * Metatags for angular-ui-router\n */\nnamespace uiroutermetatags {\n\tconst appModule = angular.module('ui.router.metatags', ['ui.router']);\n\n\texport interface IMetaTags {\n\t\ttitle?: string | Function;\n\t\tdescription?: string | Function;\n\t\tkeywords?: string | Function;\n\t\trobots?: string | Function;\n\t\tcanonical?: string | Function;\n\t\tproperties?: {\n\t\t\t[index: string]: string | Function;\n\t\t},\n\t\tprerender?: Prerender;\n\t}\n\n\texport interface Prerender {\n\t\tstatusCode?: number | Function,\n\t\theader?: string | Function\n\t}\n\n\texport interface IProvider {\n\t\tsetTitlePrefix(prefix: string): IProvider;\n\t\tsetTitleSuffix(suffix: string): IProvider;\n\t\tsetDefaultTitle(title: string): IProvider;\n\t\tsetDefaultDescription(description: string): IProvider;\n\t\tsetDefaultKeywords(keywords: string): IProvider;\n\t\tsetDefaultRobots(robots: string): IProvider;\n\t\tsetStaticProperties(properties: {}): IProvider;\n\t\tsetOGURL(enabled: boolean): IProvider;\n\t}\n\n\texport interface IService {\n\t\tupdate(tags: IMetaTags): void;\n\t\tprerender: uiroutermetatags.Prerender;\n\t}\n\n\texport interface IConfig {\n\t\tprefix: string;\n\t\tsuffix: string;\n\t\tdefaultTitle: string;\n\t\tdefaultDescription: string;\n\t\tdefaultKeywords: string;\n\t\tdefaultRobots: string;\n\t\tstaticProperties: {};\n\t\tenableOGURL: boolean;\n\t}\n\n\tclass UIRouterMetatags implements angular.IServiceProvider, uiroutermetatags.IProvider {\n\t\tprefix: string = '';\n\t\tsuffix: string = '';\n\t\tdefaultTitle: string = '';\n\t\tdefaultDescription: string = '';\n\t\tdefaultKeywords: string = '';\n\t\tdefaultRobots: string = '';\n\t\tstaticProperties: {} = {};\n\t\tenableOGURL: boolean = false;\n\n\t\t/* @ngInject */\n\t\tconstructor() {\n\n\t\t}\n\n\t\tsetTitlePrefix(prefix: string): UIRouterMetatags {\n\t\t\tthis.prefix = prefix;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetTitleSuffix(suffix: string): UIRouterMetatags {\n\t\t\tthis.suffix = suffix;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetDefaultTitle(title: string): UIRouterMetatags {\n\t\t\tthis.defaultTitle = title;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetDefaultDescription(description: string): UIRouterMetatags {\n\t\t\tthis.defaultDescription = description;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetDefaultKeywords(keywords: string): UIRouterMetatags {\n\t\t\tthis.defaultKeywords = keywords;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetDefaultRobots(robots: string): UIRouterMetatags {\n\t\t\tthis.defaultRobots = robots;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetStaticProperties(properties: {}): UIRouterMetatags {\n\t\t\tthis.staticProperties = properties;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetOGURL(enabled: boolean): UIRouterMetatags {\n\t\t\tthis.enableOGURL = enabled;\n\t\t\treturn this;\n\t\t}\n\n\t\tpublic $get(): uiroutermetatags.IConfig {\n\t\t\treturn {\n\t\t\t\tprefix: this.prefix,\n\t\t\t\tsuffix: this.suffix,\n\t\t\t\tdefaultTitle: this.defaultTitle,\n\t\t\t\tdefaultDescription: this.defaultDescription,\n\t\t\t\tdefaultKeywords: this.defaultKeywords,\n\t\t\t\tdefaultRobots: this.defaultRobots,\n\t\t\t\tstaticProperties: this.staticProperties,\n\t\t\t\tenableOGURL: this.enableOGURL\n\t\t\t}\n\t\t}\n\t}\n\n\tappModule.provider('UIRouterMetatags', UIRouterMetatags);\n\n\tclass MetaTags {\n\t\ttitle: string;\n\t\tkeywords: string;\n\t\tdescription: string;\n\t\trobots: string;\n\t\tcanonical: string;\n\t\tproperties: {};\n\t\tprerender: uiroutermetatags.Prerender = {};\n\t\t\n\t\t/* @ngInject */\n\t\tconstructor(public $log: angular.ILogService, public UIRouterMetatags: uiroutermetatags.IConfig, public $interpolate: angular.IInterpolateService, public $injector: angular.auto.IInjectorService, public $state: any, public $location: angular.ILocationService, public $window) {\n\t\t}\n\n\t\tupdate(tags: uiroutermetatags.IMetaTags) {\n\t\t\ttry {\n\t\t\t\tthis.properties = angular.extend({}, this.UIRouterMetatags.staticProperties);\n\n\t\t\t\tif (this.UIRouterMetatags.enableOGURL) {\n\t\t\t\t\tthis.properties['og:url'] = this.$location.absUrl();\n\t\t\t\t}\n\n\t\t\t\tif (tags) {\n\t\t\t\t\tthis.title = tags.title ? this.UIRouterMetatags.prefix + (this.getValue('title', tags.title) || '') + this.UIRouterMetatags.suffix : this.UIRouterMetatags.defaultTitle;\n\t\t\t\t\tthis.description = tags.description ? this.getValue('description', tags.description) : this.UIRouterMetatags.defaultDescription;\n\t\t\t\t\tthis.keywords = tags.keywords ? this.getValue('keywords', tags.keywords) : this.UIRouterMetatags.defaultKeywords;\n\t\t\t\t\tthis.robots = tags.robots ? this.getValue('robots', tags.robots) : this.UIRouterMetatags.defaultRobots;\n\t\t\t\t\tthis.canonical = tags.canonical ? this.getValue('canonical', tags.canonical) : '';\n\t\t\t\t\tangular.forEach(tags.properties, (value, key) => {\n\t\t\t\t\t\tvar v = this.getValue(key, value);\n\t\t\t\t\t\tif (v) {\n\t\t\t\t\t\t\tthis.properties[key] = v;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tthis.title = this.UIRouterMetatags.defaultTitle;\n\t\t\t\t\tthis.description = this.UIRouterMetatags.defaultDescription;\n\t\t\t\t\tthis.keywords = this.UIRouterMetatags.defaultKeywords;\n\t\t\t\t\tthis.robots = this.UIRouterMetatags.defaultRobots;\n\t\t\t\t\tthis.canonical = '';\n\t\t\t\t}\n\t\t\t\tif (tags && tags.prerender) {\n\t\t\t\t\tthis.prerender.statusCode = tags.prerender.statusCode ? this.getValue('prerender.statusCode', tags.prerender.statusCode) : 200;\n\t\t\t\t\tthis.prerender.header = tags.prerender.header ? this.getValue('rerender.header', tags.prerender.header) : null;\n\t\t\t\t} else {\n\t\t\t\t\tthis.prerender.statusCode = 200;\n\t\t\t\t\tthis.prerender.header = null;\n\t\t\t\t}\n\n\t\t\t\tthis.$window.prerenderReady = true;\n\t\t\t} catch (err) {\n\t\t\t\tthis.$log.error('error occured when extracting metatags:', err);\n\t\t\t}\n\t\t}\n\n\t\tgetValue(tagType: string, tag) {\n\t\t\ttry {\n\t\t\t\tif (!tag) {\n\t\t\t\t\treturn null;\n\t\t\t\t} else if (typeof tag === 'number') {\n\t\t\t\t\treturn tag;\n\t\t\t\t} else if (typeof tag === 'string' && tag.trim().length === 0) {\n\t\t\t\t\treturn null;\n\t\t\t\t} else if (angular.isFunction(tag) || Array.isArray(tag)) {\n\t\t\t\t\treturn this.$injector.invoke(tag, this, this.$state.$current.locals.globals);\n\t\t\t\t} else {\n\t\t\t\t\treturn this.$interpolate(tag)(this.$state.$current.locals.globals);\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\tthis.$log.error('error occured when trying to get the value of tag:', tagType, err);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t}\n\n\tappModule.service('MetaTags', MetaTags);\n\t\n\t/* @ngInject */\n\tfunction runBlock($log: angular.ILogService, $rootScope: any, MetaTags: uiroutermetatags.IService, $window: angular.IWindowService) {\n\t\t$rootScope.MetaTags = MetaTags;\n\n\t\t$rootScope.$on('$stateChangeStart', stateChangeStart);\n        $rootScope.$on('$stateChangeSuccess', stateChangeSuccess);\n        $rootScope.$on('$stateChangeError', stateChangeError);\n        $rootScope.$on('$stateNotFound', stateNotFound);\n\n\t\tfunction stateChangeStart(event: angular.IAngularEvent, toState: angular.ui.IState, toParams: any, from: angular.ui.IState, fromParams: any) {\n            $window.prerenderReady = false;\n\t\t}\n\n\t\tfunction stateChangeSuccess(event: angular.IAngularEvent, toState: any) {\n\t\t\tif (!toState.metaTags) {\n\t\t\t\t$log.debug(`MetaTags - route: \"${toState.name}\" does not contain any metatags`);\n\t\t\t}\n\t\t\tMetaTags.update(toState.metaTags);\n\t\t}\n\n\t\tfunction stateChangeError(event: angular.IAngularEvent, toState: angular.ui.IState, toParams: any, fromState: angular.ui.IState, fromParams: any, error: any) {\n\t\t\tMetaTags.prerender.statusCode = 500;\n\t\t\t$window.prerenderReady = true;\n\t\t}\n\n\t\tfunction stateNotFound(event: angular.IAngularEvent, unfoundState: angular.ui.IState, fromState: angular.ui.IState) {\n\t\t\tMetaTags.prerender.statusCode = 404;\n\t\t\t$window.prerenderReady = true;\n\t\t}\n\t}\n\n\tappModule.run(runBlock);\n}\n\ndeclare module angular.ui {\n    interface IState {\n\t\tmetaTags?: uiroutermetatags.IMetaTags;\n\t}\n}\n\ninterface Window {\n\tprerenderReady?: boolean;\n}\n","/**\n * Metatags for angular-ui-router\n */\nvar uiroutermetatags;\n(function (uiroutermetatags) {\n    var appModule = angular.module('ui.router.metatags', ['ui.router']);\n    var UIRouterMetatags = (function () {\n        /* @ngInject */\n        function UIRouterMetatags() {\n            this.prefix = '';\n            this.suffix = '';\n            this.defaultTitle = '';\n            this.defaultDescription = '';\n            this.defaultKeywords = '';\n            this.defaultRobots = '';\n            this.staticProperties = {};\n            this.enableOGURL = false;\n        }\n        UIRouterMetatags.prototype.setTitlePrefix = function (prefix) {\n            this.prefix = prefix;\n            return this;\n        };\n        UIRouterMetatags.prototype.setTitleSuffix = function (suffix) {\n            this.suffix = suffix;\n            return this;\n        };\n        UIRouterMetatags.prototype.setDefaultTitle = function (title) {\n            this.defaultTitle = title;\n            return this;\n        };\n        UIRouterMetatags.prototype.setDefaultDescription = function (description) {\n            this.defaultDescription = description;\n            return this;\n        };\n        UIRouterMetatags.prototype.setDefaultKeywords = function (keywords) {\n            this.defaultKeywords = keywords;\n            return this;\n        };\n        UIRouterMetatags.prototype.setDefaultRobots = function (robots) {\n            this.defaultRobots = robots;\n            return this;\n        };\n        UIRouterMetatags.prototype.setStaticProperties = function (properties) {\n            this.staticProperties = properties;\n            return this;\n        };\n        UIRouterMetatags.prototype.setOGURL = function (enabled) {\n            this.enableOGURL = enabled;\n            return this;\n        };\n        UIRouterMetatags.prototype.$get = function () {\n            return {\n                prefix: this.prefix,\n                suffix: this.suffix,\n                defaultTitle: this.defaultTitle,\n                defaultDescription: this.defaultDescription,\n                defaultKeywords: this.defaultKeywords,\n                defaultRobots: this.defaultRobots,\n                staticProperties: this.staticProperties,\n                enableOGURL: this.enableOGURL\n            };\n        };\n        return UIRouterMetatags;\n    }());\n    appModule.provider('UIRouterMetatags', UIRouterMetatags);\n    var MetaTags = (function () {\n        /* @ngInject */\n        function MetaTags($log, UIRouterMetatags, $interpolate, $injector, $state, $location, $window) {\n            this.$log = $log;\n            this.UIRouterMetatags = UIRouterMetatags;\n            this.$interpolate = $interpolate;\n            this.$injector = $injector;\n            this.$state = $state;\n            this.$location = $location;\n            this.$window = $window;\n            this.prerender = {};\n        }\n        MetaTags.prototype.update = function (tags) {\n            var _this = this;\n            try {\n                this.properties = angular.extend({}, this.UIRouterMetatags.staticProperties);\n                if (this.UIRouterMetatags.enableOGURL) {\n                    this.properties['og:url'] = this.$location.absUrl();\n                }\n                if (tags) {\n                    this.title = tags.title ? this.UIRouterMetatags.prefix + (this.getValue('title', tags.title) || '') + this.UIRouterMetatags.suffix : this.UIRouterMetatags.defaultTitle;\n                    this.description = tags.description ? this.getValue('description', tags.description) : this.UIRouterMetatags.defaultDescription;\n                    this.keywords = tags.keywords ? this.getValue('keywords', tags.keywords) : this.UIRouterMetatags.defaultKeywords;\n                    this.robots = tags.robots ? this.getValue('robots', tags.robots) : this.UIRouterMetatags.defaultRobots;\n                    this.canonical = tags.canonical ? this.getValue('canonical', tags.canonical) : '';\n                    angular.forEach(tags.properties, function (value, key) {\n                        var v = _this.getValue(key, value);\n                        if (v) {\n                            _this.properties[key] = v;\n                        }\n                    });\n                }\n                else {\n                    this.title = this.UIRouterMetatags.defaultTitle;\n                    this.description = this.UIRouterMetatags.defaultDescription;\n                    this.keywords = this.UIRouterMetatags.defaultKeywords;\n                    this.robots = this.UIRouterMetatags.defaultRobots;\n                    this.canonical = '';\n                }\n                if (tags && tags.prerender) {\n                    this.prerender.statusCode = tags.prerender.statusCode ? this.getValue('prerender.statusCode', tags.prerender.statusCode) : 200;\n                    this.prerender.header = tags.prerender.header ? this.getValue('rerender.header', tags.prerender.header) : null;\n                }\n                else {\n                    this.prerender.statusCode = 200;\n                    this.prerender.header = null;\n                }\n                this.$window.prerenderReady = true;\n            }\n            catch (err) {\n                this.$log.error('error occured when extracting metatags:', err);\n            }\n        };\n        MetaTags.prototype.getValue = function (tagType, tag) {\n            try {\n                if (!tag) {\n                    return null;\n                }\n                else if (typeof tag === 'number') {\n                    return tag;\n                }\n                else if (typeof tag === 'string' && tag.trim().length === 0) {\n                    return null;\n                }\n                else if (angular.isFunction(tag) || Array.isArray(tag)) {\n                    return this.$injector.invoke(tag, this, this.$state.$current.locals.globals);\n                }\n                else {\n                    return this.$interpolate(tag)(this.$state.$current.locals.globals);\n                }\n            }\n            catch (err) {\n                this.$log.error('error occured when trying to get the value of tag:', tagType, err);\n                return null;\n            }\n        };\n        return MetaTags;\n    }());\n    appModule.service('MetaTags', MetaTags);\n    /* @ngInject */\n    function runBlock($log, $rootScope, MetaTags, $window) {\n        $rootScope.MetaTags = MetaTags;\n        $rootScope.$on('$stateChangeStart', stateChangeStart);\n        $rootScope.$on('$stateChangeSuccess', stateChangeSuccess);\n        $rootScope.$on('$stateChangeError', stateChangeError);\n        $rootScope.$on('$stateNotFound', stateNotFound);\n        function stateChangeStart(event, toState, toParams, from, fromParams) {\n            $window.prerenderReady = false;\n        }\n        function stateChangeSuccess(event, toState) {\n            if (!toState.metaTags) {\n                $log.debug(\"MetaTags - route: \\\"\" + toState.name + \"\\\" does not contain any metatags\");\n            }\n            MetaTags.update(toState.metaTags);\n        }\n        function stateChangeError(event, toState, toParams, fromState, fromParams, error) {\n            MetaTags.prerender.statusCode = 500;\n            $window.prerenderReady = true;\n        }\n        function stateNotFound(event, unfoundState, fromState) {\n            MetaTags.prerender.statusCode = 404;\n            $window.prerenderReady = true;\n        }\n    }\n    appModule.run(runBlock);\n})(uiroutermetatags || (uiroutermetatags = {}));\n"],"sourceRoot":"/source/"}