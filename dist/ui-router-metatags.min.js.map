{"version":3,"sources":["ui-router-metatags.ts","ui-router-metatags.js"],"names":["uiroutermetatags","runBlock","$log","$rootScope","MetaTags","$window","stateChangeStart","event","toState","toParams","from","fromParams","prerenderReady","stateChangeSuccess","metaTags","debug","name","update","stateChangeError","fromState","error","prerender","statusCode","stateNotFound","unfoundState","$on","$inject","appModule","angular","module","UIRouterMetatags","this","prefix","suffix","defaultTitle","defaultDescription","defaultKeywords","defaultRobots","staticProperties","defaultTwitter","enableOGURL","enableTWURL","prototype","setTitlePrefix","setTitleSuffix","setDefaultTitle","title","setDefaultDescription","description","setDefaultKeywords","keywords","setDefaultRobots","robots","setStaticProperties","properties","setDefaultTwitter","twitter","setOGURL","enabled","setTWURL","$get","provider","$interpolate","$injector","$state","$location","tags","_this","extend","absUrl","getValue","canonical","forEach","value","key","v","header","document","err","tagType","tag","trim","length","isFunction","Array","isArray","invoke","$current","locals","globals","service","run"],"mappings":"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","file":"ui-router-metatags.min.js","sourcesContent":["/**\n * Metatags for angular-ui-router\n */\nnamespace uiroutermetatags {\n\tconst appModule = angular.module('ui.router.metatags', ['ui.router']);\n\n\texport interface IMetaTags {\n\t\ttitle?: string | Function;\n\t\tdescription?: string | Function;\n\t\tkeywords?: string | Function;\n\t\trobots?: string | Function;\n\t\tcanonical?: string | Function;\n\t\tproperties?: {\n\t\t\t[index: string]: string | Function;\n\t\t},\n\t\tprerender?: Prerender;\n\t}\n\n\texport interface Prerender {\n\t\tstatusCode?: number | Function,\n\t\theader?: string | Function\n\t}\n\n\texport interface IProvider {\n\t\tsetTitlePrefix(prefix: string): IProvider;\n\t\tsetTitleSuffix(suffix: string): IProvider;\n\t\tsetDefaultTitle(title: string): IProvider;\n\t\tsetDefaultDescription(description: string): IProvider;\n\t\tsetDefaultKeywords(keywords: string): IProvider;\n\t\tsetDefaultRobots(robots: string): IProvider;\n    setStaticProperties(properties: {}): IProvider;\n    setDefaultTwitter(properties: {}): IProvider;\n    setOGURL(enabled: boolean): IProvider;\n    setTWURL(enabled: boolean): IProvider;\n\t}\n\n\texport interface IService {\n\t\tupdate(tags: IMetaTags): void;\n\t\tprerender: uiroutermetatags.Prerender;\n\t}\n\n\texport interface IConfig {\n\t\tprefix: string;\n\t\tsuffix: string;\n\t\tdefaultTitle: string;\n    defaultDescription: string;\n    defaultTwitter: {},\n\t\tdefaultKeywords: string;\n\t\tdefaultRobots: string;\n\t\tstaticProperties: {};\n    enableOGURL: boolean;\n    enableTWURL: boolean;\n\t}\n\n\tclass UIRouterMetatags implements angular.IServiceProvider, uiroutermetatags.IProvider {\n\t\tprefix: string = '';\n\t\tsuffix: string = '';\n\t\tdefaultTitle: string = '';\n\t\tdefaultDescription: string = '';\n\t\tdefaultKeywords: string = '';\n\t\tdefaultRobots: string = '';\n\t\tstaticProperties: {} = {};\n    defaultTwitter: {} = {};\n\t\tenableOGURL: boolean = false;\n    enableTWURL: boolean = false;\n\n\t\t/* @ngInject */\n\t\tconstructor() {\n\n\t\t}\n\n\t\tsetTitlePrefix(prefix: string): UIRouterMetatags {\n\t\t\tthis.prefix = prefix;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetTitleSuffix(suffix: string): UIRouterMetatags {\n\t\t\tthis.suffix = suffix;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetDefaultTitle(title: string): UIRouterMetatags {\n\t\t\tthis.defaultTitle = title;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetDefaultDescription(description: string): UIRouterMetatags {\n\t\t\tthis.defaultDescription = description;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetDefaultKeywords(keywords: string): UIRouterMetatags {\n\t\t\tthis.defaultKeywords = keywords;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetDefaultRobots(robots: string): UIRouterMetatags {\n\t\t\tthis.defaultRobots = robots;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetStaticProperties(properties: {}): UIRouterMetatags {\n\t\t\tthis.staticProperties = properties;\n\t\t\treturn this;\n\t\t}\n\n    setDefaultTwitter(twitter: {}): UIRouterMetatags {\n\t\t\tthis.defaultTwitter = twitter;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetOGURL(enabled: boolean): UIRouterMetatags {\n\t\t\tthis.enableOGURL = enabled;\n\t\t\treturn this;\n\t\t}\n\n    setTWURL(enabled: boolean): UIRouterMetatags {\n      this.enableTWURL = enabled;\n      return this;\n    }\n\n\t\tpublic $get(): uiroutermetatags.IConfig {\n\t\t\treturn {\n\t\t\t\tprefix: this.prefix,\n\t\t\t\tsuffix: this.suffix,\n\t\t\t\tdefaultTitle: this.defaultTitle,\n\t\t\t\tdefaultDescription: this.defaultDescription,\n\t\t\t\tdefaultKeywords: this.defaultKeywords,\n\t\t\t\tdefaultRobots: this.defaultRobots,\n        defaultTwitter: this.defaultTwitter,\n\t\t\t\tstaticProperties: this.staticProperties,\n        enableOGURL: this.enableOGURL,\n        enableTWURL: this.enableTWURL\n\t\t\t}\n\t\t}\n\t}\n\n\tappModule.provider('UIRouterMetatags', UIRouterMetatags);\n\n\tclass MetaTags {\n\t\ttitle: string;\n\t\tkeywords: string;\n\t\tdescription: string;\n\t\trobots: string;\n\t\tcanonical: string;\n    twitter: {};\n\t\tproperties: {};\n\t\tprerender: uiroutermetatags.Prerender = {};\n\n\t\t/* @ngInject */\n\t\tconstructor(public $log: angular.ILogService, public UIRouterMetatags: uiroutermetatags.IConfig, public $interpolate: angular.IInterpolateService, public $injector: angular.auto.IInjectorService, public $state: any, public $location: angular.ILocationService, public $window) {\n\t\t}\n\n\t\tupdate(tags: uiroutermetatags.IMetaTags) {\n\t\t\ttry {\n        this.properties = angular.extend({}, this.UIRouterMetatags.staticProperties);\n        this.twitter = angular.extend({}, this.UIRouterMetatags.defaultTwitter);\n\n\t\t\t\tif (this.UIRouterMetatags.enableOGURL) {\n          this.properties['og:url'] = this.$location.absUrl();\n\t\t\t\t}\n\n        if (this.UIRouterMetatags.enableTWURL) {\n          this.twitter['url'] = this.$location.absUrl();\n        }\n\n\t\t\t\tif (tags) {\n\t\t\t\t\tthis.title = tags.title ? this.UIRouterMetatags.prefix + (this.getValue('title', tags.title) || '') + this.UIRouterMetatags.suffix : this.UIRouterMetatags.defaultTitle;\n\t\t\t\t\tthis.description = tags.description ? this.getValue('description', tags.description) : this.UIRouterMetatags.defaultDescription;\n\t\t\t\t\tthis.keywords = tags.keywords ? this.getValue('keywords', tags.keywords) : this.UIRouterMetatags.defaultKeywords;\n\t\t\t\t\tthis.robots = tags.robots ? this.getValue('robots', tags.robots) : this.UIRouterMetatags.defaultRobots;\n\t\t\t\t\tthis.canonical = tags.canonical ? this.getValue('canonical', tags.canonical) : '';\n          angular.forEach(tags.properties, (value, key) => {\n\t\t\t\t\t\tvar v = this.getValue(key, value);\n\t\t\t\t\t\tif (v) {\n\t\t\t\t\t\t\tthis.properties[key] = v;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tangular.forEach(tags.twitter, (value, key) => {\n\t\t\t\t\t\tvar v = this.getValue(key, value);\n\t\t\t\t\t\tif (v) {\n\t\t\t\t\t\t\tthis.twitter[key] = v;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tthis.title = this.UIRouterMetatags.defaultTitle;\n\t\t\t\t\tthis.description = this.UIRouterMetatags.defaultDescription;\n\t\t\t\t\tthis.keywords = this.UIRouterMetatags.defaultKeywords;\n\t\t\t\t\tthis.robots = this.UIRouterMetatags.defaultRobots;\n\t\t\t\t\tthis.canonical = '';\n\t\t\t\t}\n\t\t\t\tif (tags && tags.prerender) {\n\t\t\t\t\tthis.prerender.statusCode = tags.prerender.statusCode ? this.getValue('prerender.statusCode', tags.prerender.statusCode) : 200;\n\t\t\t\t\tthis.prerender.header = tags.prerender.header ? this.getValue('rerender.header', tags.prerender.header) : null;\n\t\t\t\t} else {\n\t\t\t\t\tthis.prerender.statusCode = 200;\n\t\t\t\t\tthis.prerender.header = null;\n\t\t\t\t}\n\t\t\t\tthis.$window.document.title = this.title;\n\t\t\t\tthis.$window.prerenderReady = true;\n\t\t\t} catch (err) {\n\t\t\t\tthis.$log.error('error occured when extracting metatags:', err);\n\t\t\t}\n\t\t}\n\n\t\tgetValue(tagType: string, tag) {\n\t\t\ttry {\n\t\t\t\tif (!tag) {\n\t\t\t\t\treturn null;\n\t\t\t\t} else if (typeof tag === 'number') {\n\t\t\t\t\treturn tag;\n\t\t\t\t} else if (typeof tag === 'string' && tag.trim().length === 0) {\n\t\t\t\t\treturn null;\n\t\t\t\t} else if (angular.isFunction(tag) || Array.isArray(tag)) {\n\t\t\t\t\treturn this.$injector.invoke(tag, this, this.$state.$current.locals.globals);\n\t\t\t\t} else {\n\t\t\t\t\treturn this.$interpolate(tag)(this.$state.$current.locals.globals);\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\tthis.$log.error('error occured when trying to get the value of tag:', tagType, err);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t}\n\n\tappModule.service('MetaTags', MetaTags);\n\n\t/* @ngInject */\n\tfunction runBlock($log: angular.ILogService, $rootScope: any, MetaTags: uiroutermetatags.IService, $window: angular.IWindowService) {\n\t\t$rootScope.MetaTags = MetaTags;\n\n\t\t$rootScope.$on('$stateChangeStart', stateChangeStart);\n        $rootScope.$on('$stateChangeSuccess', stateChangeSuccess);\n        $rootScope.$on('$stateChangeError', stateChangeError);\n        $rootScope.$on('$stateNotFound', stateNotFound);\n\n\t\tfunction stateChangeStart(event: angular.IAngularEvent, toState: angular.ui.IState, toParams: any, from: angular.ui.IState, fromParams: any) {\n            $window.prerenderReady = false;\n\t\t}\n\n\t\tfunction stateChangeSuccess(event: angular.IAngularEvent, toState: any) {\n\t\t\tif (!toState.metaTags) {\n\t\t\t\t$log.debug(`MetaTags - route: \"${toState.name}\" does not contain any metatags`);\n\t\t\t}\n\t\t\tMetaTags.update(toState.metaTags);\n\t\t}\n\n\t\tfunction stateChangeError(event: angular.IAngularEvent, toState: angular.ui.IState, toParams: any, fromState: angular.ui.IState, fromParams: any, error: any) {\n\t\t\tMetaTags.prerender.statusCode = 500;\n\t\t\t$window.prerenderReady = true;\n\t\t}\n\n\t\tfunction stateNotFound(event: angular.IAngularEvent, unfoundState: angular.ui.IState, fromState: angular.ui.IState) {\n\t\t\tMetaTags.prerender.statusCode = 404;\n\t\t\t$window.prerenderReady = true;\n\t\t}\n\t}\n\n\tappModule.run(runBlock);\n}\n\ndeclare module angular.ui {\n    interface IState {\n\t\tmetaTags?: uiroutermetatags.IMetaTags;\n\t}\n}\n\ninterface Window {\n\tprerenderReady?: boolean;\n}\n","/**\n * Metatags for angular-ui-router\n */\nvar uiroutermetatags;\n(function (uiroutermetatags) {\n    var appModule = angular.module('ui.router.metatags', ['ui.router']);\n    var UIRouterMetatags = (function () {\n        /* @ngInject */\n        function UIRouterMetatags() {\n            this.prefix = '';\n            this.suffix = '';\n            this.defaultTitle = '';\n            this.defaultDescription = '';\n            this.defaultKeywords = '';\n            this.defaultRobots = '';\n            this.staticProperties = {};\n            this.defaultTwitter = {};\n            this.enableOGURL = false;\n            this.enableTWURL = false;\n        }\n        UIRouterMetatags.prototype.setTitlePrefix = function (prefix) {\n            this.prefix = prefix;\n            return this;\n        };\n        UIRouterMetatags.prototype.setTitleSuffix = function (suffix) {\n            this.suffix = suffix;\n            return this;\n        };\n        UIRouterMetatags.prototype.setDefaultTitle = function (title) {\n            this.defaultTitle = title;\n            return this;\n        };\n        UIRouterMetatags.prototype.setDefaultDescription = function (description) {\n            this.defaultDescription = description;\n            return this;\n        };\n        UIRouterMetatags.prototype.setDefaultKeywords = function (keywords) {\n            this.defaultKeywords = keywords;\n            return this;\n        };\n        UIRouterMetatags.prototype.setDefaultRobots = function (robots) {\n            this.defaultRobots = robots;\n            return this;\n        };\n        UIRouterMetatags.prototype.setStaticProperties = function (properties) {\n            this.staticProperties = properties;\n            return this;\n        };\n        UIRouterMetatags.prototype.setDefaultTwitter = function (twitter) {\n            this.defaultTwitter = twitter;\n            return this;\n        };\n        UIRouterMetatags.prototype.setOGURL = function (enabled) {\n            this.enableOGURL = enabled;\n            return this;\n        };\n        UIRouterMetatags.prototype.setTWURL = function (enabled) {\n            this.enableTWURL = enabled;\n            return this;\n        };\n        UIRouterMetatags.prototype.$get = function () {\n            return {\n                prefix: this.prefix,\n                suffix: this.suffix,\n                defaultTitle: this.defaultTitle,\n                defaultDescription: this.defaultDescription,\n                defaultKeywords: this.defaultKeywords,\n                defaultRobots: this.defaultRobots,\n                defaultTwitter: this.defaultTwitter,\n                staticProperties: this.staticProperties,\n                enableOGURL: this.enableOGURL,\n                enableTWURL: this.enableTWURL\n            };\n        };\n        return UIRouterMetatags;\n    }());\n    appModule.provider('UIRouterMetatags', UIRouterMetatags);\n    var MetaTags = (function () {\n        /* @ngInject */\n        function MetaTags($log, UIRouterMetatags, $interpolate, $injector, $state, $location, $window) {\n            this.$log = $log;\n            this.UIRouterMetatags = UIRouterMetatags;\n            this.$interpolate = $interpolate;\n            this.$injector = $injector;\n            this.$state = $state;\n            this.$location = $location;\n            this.$window = $window;\n            this.prerender = {};\n        }\n        MetaTags.prototype.update = function (tags) {\n            var _this = this;\n            try {\n                this.properties = angular.extend({}, this.UIRouterMetatags.staticProperties);\n                this.twitter = angular.extend({}, this.UIRouterMetatags.defaultTwitter);\n                if (this.UIRouterMetatags.enableOGURL) {\n                    this.properties['og:url'] = this.$location.absUrl();\n                }\n                if (this.UIRouterMetatags.enableTWURL) {\n                    this.twitter['url'] = this.$location.absUrl();\n                }\n                if (tags) {\n                    this.title = tags.title ? this.UIRouterMetatags.prefix + (this.getValue('title', tags.title) || '') + this.UIRouterMetatags.suffix : this.UIRouterMetatags.defaultTitle;\n                    this.description = tags.description ? this.getValue('description', tags.description) : this.UIRouterMetatags.defaultDescription;\n                    this.keywords = tags.keywords ? this.getValue('keywords', tags.keywords) : this.UIRouterMetatags.defaultKeywords;\n                    this.robots = tags.robots ? this.getValue('robots', tags.robots) : this.UIRouterMetatags.defaultRobots;\n                    this.canonical = tags.canonical ? this.getValue('canonical', tags.canonical) : '';\n                    angular.forEach(tags.properties, function (value, key) {\n                        var v = _this.getValue(key, value);\n                        if (v) {\n                            _this.properties[key] = v;\n                        }\n                    });\n                    angular.forEach(tags.twitter, function (value, key) {\n                        var v = _this.getValue(key, value);\n                        if (v) {\n                            _this.twitter[key] = v;\n                        }\n                    });\n                }\n                else {\n                    this.title = this.UIRouterMetatags.defaultTitle;\n                    this.description = this.UIRouterMetatags.defaultDescription;\n                    this.keywords = this.UIRouterMetatags.defaultKeywords;\n                    this.robots = this.UIRouterMetatags.defaultRobots;\n                    this.canonical = '';\n                }\n                if (tags && tags.prerender) {\n                    this.prerender.statusCode = tags.prerender.statusCode ? this.getValue('prerender.statusCode', tags.prerender.statusCode) : 200;\n                    this.prerender.header = tags.prerender.header ? this.getValue('rerender.header', tags.prerender.header) : null;\n                }\n                else {\n                    this.prerender.statusCode = 200;\n                    this.prerender.header = null;\n                }\n                this.$window.document.title = this.title;\n                this.$window.prerenderReady = true;\n            }\n            catch (err) {\n                this.$log.error('error occured when extracting metatags:', err);\n            }\n        };\n        MetaTags.prototype.getValue = function (tagType, tag) {\n            try {\n                if (!tag) {\n                    return null;\n                }\n                else if (typeof tag === 'number') {\n                    return tag;\n                }\n                else if (typeof tag === 'string' && tag.trim().length === 0) {\n                    return null;\n                }\n                else if (angular.isFunction(tag) || Array.isArray(tag)) {\n                    return this.$injector.invoke(tag, this, this.$state.$current.locals.globals);\n                }\n                else {\n                    return this.$interpolate(tag)(this.$state.$current.locals.globals);\n                }\n            }\n            catch (err) {\n                this.$log.error('error occured when trying to get the value of tag:', tagType, err);\n                return null;\n            }\n        };\n        return MetaTags;\n    }());\n    appModule.service('MetaTags', MetaTags);\n    /* @ngInject */\n    function runBlock($log, $rootScope, MetaTags, $window) {\n        $rootScope.MetaTags = MetaTags;\n        $rootScope.$on('$stateChangeStart', stateChangeStart);\n        $rootScope.$on('$stateChangeSuccess', stateChangeSuccess);\n        $rootScope.$on('$stateChangeError', stateChangeError);\n        $rootScope.$on('$stateNotFound', stateNotFound);\n        function stateChangeStart(event, toState, toParams, from, fromParams) {\n            $window.prerenderReady = false;\n        }\n        function stateChangeSuccess(event, toState) {\n            if (!toState.metaTags) {\n                $log.debug(\"MetaTags - route: \\\"\" + toState.name + \"\\\" does not contain any metatags\");\n            }\n            MetaTags.update(toState.metaTags);\n        }\n        function stateChangeError(event, toState, toParams, fromState, fromParams, error) {\n            MetaTags.prerender.statusCode = 500;\n            $window.prerenderReady = true;\n        }\n        function stateNotFound(event, unfoundState, fromState) {\n            MetaTags.prerender.statusCode = 404;\n            $window.prerenderReady = true;\n        }\n    }\n    appModule.run(runBlock);\n})(uiroutermetatags || (uiroutermetatags = {}));\n"]}